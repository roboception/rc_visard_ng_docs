
.. include:: global_rst.glb

.. _sect-stereo-matching:

Stereo matching
===============

.. index::
   single: disparity
   single: disparity image
   single: depth image

The stereo matching module is a base module which is available on every |rc_xxx|
and uses the rectified stereo-image pair to compute
disparity, error, and confidence images. It also offers a service to measure depth in
a specified image region (see :ref:`sect-stereo-matching-services`:latex:`, Section \ref{stereo_matching:sect-stereo-matching-services}`).

.. only:: rc_cube and (roboception or schunk or basler)

   .. note:: This module is not available in camera pipelines of type ``blaze``.

To compute full resolution disparity, error and confidence images, an additional StereoPlus
:ref:`license<sect-updating-license>`
:latex:`(Section \ref{maintenance:sect-updating-license})` is required.
This license is included in every |rc_xxx| purchased after
31.01.2019.

.. _sect-disparity-images:

Computing disparity images
--------------------------

After rectification, an object point is guaranteed to be projected onto the same
pixel row in both left and right image. That point's pixel
column in the right image is always lower than or equal
to the same point's pixel column in the left image. The term disparity
signifies the difference between the pixel columns in the right and left images
and expresses the depth or distance of the object point from the camera. The
disparity image stores the disparity values of all pixels in the left camera
image.

The larger the disparity, the closer the object point. A disparity of 0
means that the projections of the object point are in the same image column
and the object point is at infinite distance. Often, there are pixels for which disparity
cannot be determined. This is the case for occlusions that appear on the
left sides of objects, because these areas are not seen from the right camera.
Furthermore, disparity cannot be determined for textureless areas. Pixels
for which the disparity cannot be determined are marked as invalid with the
special disparity value of 0. To distinguish between invalid disparity
measurements and disparity measurements of 0 for objects that are infinitely
far away, the disparity value for the latter is set to the smallest possible
disparity value above 0.

.. index:: ! SGM
   see: Semi-Global Matching; SGM

To compute disparity values, the stereo matching algorithm has to find
corresponding object points in the left and right camera images. These are points
that represent the same object point in the scene. For stereo matching, the |rc_xxx| uses
|sgm|, which offers quick run times and
great accuracy, especially at object borders, fine structures, and in weakly textured areas.

.. index::
   single: texture

A key requirement for any stereo matching method is the presence of texture in the
image, i.e., image-intensity changes due to patterns or surface
structure within the scene. In completely untextured regions such as a flat white
wall without any structure, disparity values can either not be computed or the
results are erroneous or have low confidence (see
:ref:`sect-confidence-error`:latex:`, Section \ref{stereo_matching:sect-confidence-error}`). The texture in the scene should not be an
artificial, repetitive pattern, since those structures may lead to ambiguities and hence to wrong disparity measurements.

When working with poorly textured objects or in
untextured environments, a static artificial texture can be projected
onto the scene using an external pattern projector. This pattern should be random-like
and not contain repetitive structures. The |rc_xxx| provides the IOControl module
(see :ref:`sect-iocontrol`:latex:`, Section \ref{iocontrol:sect-iocontrol}`) as
optional software module which can control a pattern projector connected to the sensor.

.. _sect-point-clouds:

Computing depth images and point clouds
---------------------------------------

.. index:: ! depth image
   single: depth image
   pair: 3D coordinates; disparity image

The following equations show how to compute an object point's actual 3D coordinates :math:`P_x, P_y, P_z` in the
camera coordinate frame
from the disparity image's pixel coordinates :math:`p_{x}, p_{y}`
and the disparity value :math:`d` in pixels:

.. math::
  :label: reconstruction

  P_x&=\frac{p_x \cdot t}{d}\\
  P_y&=\frac{p_y \cdot t}{d}\\
  P_z&=\frac{f \cdot t}{d},

where :math:`f` is the focal length after rectification in pixels and :math:`t`
is the stereo baseline in meters, which was determined during calibration. These values
are also transferred over the GenICam interface (see
:ref:`sect-custom-genicam-params`:latex:`, \:Section \ref{gigevision:sect-custom-genicam-params}`).

.. only:: rc_visard or rc_visard_ng

   .. note:: The |rc_xxx|'s camera coordinate frame is defined as shown in
             :ref:`sect-coordinate-frames`:latex:`\:(Section \ref{hardware_spec:sect-coordinate-frames})`.

.. note::  The |rc_xxx| reports a focal length factor via its various
      interfaces. It relates to the image width
      for supporting different image resolutions. The focal length :math:`f`
      in pixels can be easily obtained by multiplying the focal length factor
      by the image width in pixels.

Please note that equations :eq:`reconstruction` assume that the coordinate
frame is centered in the principal point that is typically in the center of the image,
and :math:`p_{x}, p_{y}` refer to the middle of the pixel, i.e. by adding 0.5 to the
integer pixel coordinates. The following figure shows the definition of the image coordinate
frame.

.. figure:: images/image_coordinates.png
   :width: 30 %
   :align: center

   The image coordinate frame's origin is defined to be at the image center
   -- :math:`w` is the image width and :math:`h` is the image height.

The same equations, but with the corresponding GenICam parameters are given in
:ref:`sect-image-stream-conversions`:latex:`\:(Section \ref{gigevision:sect-image-stream-conversions})`.

.. index::
   single: 3D modeling
   single: point cloud
   single: 3D coordinates

The set of all object points computed from the disparity image gives the point
cloud, which can be used for 3D modeling applications. The disparity image is
converted into a depth image by replacing
the disparity value in each pixel with the value of :math:`P_z`.

.. only:: roboception or schunk or matrixvision

   .. Note:: |manufacturer| provides software and examples for receiving disparity images from
      the |rc_xxx| via GigE Vision and computing depth images and point clouds. See
      http://www.roboception.com/download.

.. _sect-confidence-error:

Confidence and error images
---------------------------

.. index:: ! confidence, !error
   single: disparity error

For each disparity image, additionally an error image and a confidence image are provided,
which give uncertainty measures for each disparity value. These images
have the same resolution and the same frame rate as the disparity image. The
error image contains the disparity error :math:`d_{eps}` in pixels corresponding
to the disparity value at the same image coordinates in the disparity image.
The confidence image contains the corresponding confidence value :math:`c`
between 0 and 1. The confidence is defined as the probability of the true
disparity value being within the interval of three times the error around the
measured disparity :math:`d`, i.e., :math:`[d-3d_{eps}, d+3d_{eps}]`.
Thus, the disparity image with error and confidence values can be used in
applications requiring probabilistic inference. The confidence and error values
corresponding to an invalid disparity measurement will be 0.

The disparity error :math:`d_{eps}` (in pixels) can be converted to a depth error :math:`z_{eps}`
(in meters) using the focal length :math:`f` (in pixels), the baseline :math:`t` (in meters), and the disparity
value :math:`d` (in pixels) of the same pixel in the disparity image:

.. math::
   z_{eps}=\frac{d_{eps}\cdot f\cdot t}{d^2}.
   :label: eq-deptherror

Combining equations :eq:`reconstruction` and :eq:`eq-deptherror` allows the
depth error to be related to the depth:

.. math::
   z_{eps}=\frac{d_{eps}\cdot{P_z}^2}{f\cdot t}.

With the focal lengths and baselines of the different camera models and the typical combined
calibration and stereo matching error :math:`d_{eps}` of 0.25 pixels, the depth accuracy
can be visualized as shown below.

.. figure:: _plot/reconstruction_error.png
   :width: 60 %
   :align: center


.. _sect-disp-accessing-images:

Viewing and downloading images and point clouds
-----------------------------------------------

.. index::
   pair: timestamp; image
   pair: point cloud; download

The |rc_xxx| provides time-stamped disparity, error, and confidence images over the
GenICam interface (see :ref:`sect-provided-image-streams`:latex:`, \:Section \ref{gigevision:sect-provided-image-streams}`).
Live streams of the images are provided with reduced quality on the *Depth Image* page :cubeonly:`in the desired pipeline` of the
:ref:`Web GUI<sect-web-gui>`:latex:`\:(Section \ref{webgui:sect-web-gui})`.

The |webgui| also provides the possibility to download a snapshot of the current scene containing the depth, error and confidence
images, as well as a point cloud in ply format as described in
:ref:`sect-webgui-depth-snapshot`:latex:`\:(Section \ref{webgui:sect-webgui-depth-snapshot})`.

.. _sect-disp-image-parameters:

Parameters
----------

.. index::
   pair: parameters; disparity image
   pair: disparity image; Web GUI
   pair: depth image; Web GUI

The stereo matching module is called ``rc_stereomatching`` in the |rest-api| and it is represented by the
*Depth Image* page :cubeonly:`in the desired pipeline` in the :ref:`Web GUI<sect-web-gui>`:latex:`\:(Section \ref{webgui:sect-web-gui})`.
The user can change the stereo matching parameters there, or use the |rest-api|
(:ref:`sect-rest-api`:latex:`, Section \ref{rest_api:sect-rest-api}`) or GigE Vision
(:ref:`sect-genicam`:latex:`, Section \ref{gigevision:sect-genicam}`).

Parameter overview
^^^^^^^^^^^^^^^^^^

.. include:: _gen/nodes/params/rc_stereomatching.txt

Description of run-time parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Each run-time parameter is represented by a row on the |webgui|'s *Depth Image* page. The name in the
|webgui| is given in brackets behind the parameter name and the parameters are listed in the order
they appear in the |webgui|:

.. figure:: images/webgui_depth_image.png
    :width: 100 %
    :align: center

    The |webgui|'s *Depth Image* page


.. _expl-depth-acquisition-mode:

.. index::
   pair: disparity image; acquisition mode

``acquisition_mode`` (*Acquisition Mode*)
'''''''''''''''''''''''''''''''''''''''''
    The acquisition mode can be set to ``Continuous``, ``SingleFrame`` (*Single*) or ``SingleFrameOut1`` (*Single + Out1*).
    The first one is the default, which performs stereo matching continuously according to the
    user defined frame rate and the available computation resources. The two other modes
    perform stereo matching upon each click of the :guilabel:`Acquire` button. The `Single + Out1`
    mode additionally controls an external projector that is connected to GPIO Out1
    (:ref:`sect-iocontrol`:latex:`, Section \ref{iocontrol:sect-iocontrol}`). In this mode,
    ``out1_mode`` of the IOControl module is automatically set to ``ExposureAlternateActive`` upon each trigger call
    and reset to ``Low`` after receiving images for stereo matching.

    .. NOTE:: The ``Single + Out1`` mode can only change the ``out1_mode`` if the IOControl
       license is available on the |rc_xxx|.

    Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?acquisition_mode=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?acquisition_mode=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?acquisition_mode=<value>

.. _expl-depth-exposure-adapt-timeout:

.. index::
   pair: disparity image; exposure adaptation timeout

``exposure_adapt_timeout`` (*Exposure Adaptation Timeout*)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    The exposure adaptation timeout gives the maximum time in seconds that the system will wait after triggering
    an image acquisition until auto exposure has found the optimal exposure time. This timeout is only used
    in ``SingleFrame`` (*Single*) or ``SingleFrameOut1`` (*Single + Out1*)
    acquisition mode with auto exposure active. This value should be increased in applications
    with changing lighting conditions, when images are under- oder overexposed and the resulting
    disparity images are too sparse. In these cases multiple images are acquired until the auto-exposure
    mode has adjusted or the timeout is reached, and only then the actual image acquisition is triggered.

    Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?exposure_adapt_timeout=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?exposure_adapt_timeout=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?exposure_adapt_timeout=<value>

.. index::
   pair: quality; disparity image

.. _expl-depth-quality:

``quality`` (*Quality*)
'''''''''''''''''''''''
    Disparity images can be computed in different resolutions:
    ``Full`` (full image resolution), ``High`` (half of the full image resolution),
    ``Medium`` (quarter of the full image resolution)
    and ``Low`` (sixth of the full image resolution). Full resolution matching (``Full``)
    is only possible with a valid StereoPlus license. The lower
    the resolution, the higher the frame rate of the disparity image. Please note that the frame
    rate of the disparity, confidence, and error images will always be less than or
    equal to the camera frame rate. In case the projector is in ``ExposureAlternateActive`` mode,
    the frame rate of the images can be at most half of the camera frame rate.

    .. only:: rc_visard

        A 25 Hz frame rate can be achieved only at the lowest resolution.
    
    .. only:: rc_visard_ng

        A 25 Hz frame rate can be achieved only at medium and low resolution.

    If full resolution is selected, the depth range is internally limited due to
    limited on-board memory resources. It is recommended to adjust ``mindepth``
    and ``maxdepth`` to the depth range that is required by the application.

    .. only:: rc_visard

      .. tabularcolumns:: |l|L|L|L|L|
      .. _tab-stereo-quality-spec:
      .. csv-table:: Depth image resolutions depending on the chosen quality

         "Quality",    "**Full**",    "**High**",    "**Medium**",    "**Low**"
         "Resolution (pixel)",    "1280 x 960",    "640 x 480",    "320 x 240",    "214 x 160"

    .. only:: rc_visard_ng

      .. tabularcolumns:: |l|L|L|L|L|
      .. _tab-stereo-quality-spec:
      .. csv-table:: Depth image resolutions depending on the chosen quality

         "Quality",    "**Full**",    "**High**",    "**Medium**",    "**Low**"
         "Resolution (pixel)",    "1440 x 1080",    "720 x 540",    "360 x 270",    "240 x 180"

   .. only:: rc_cube

      .. tabularcolumns:: |l|L|L|L|L|
      .. _tab-stereo-quality-spec:
      .. csv-table:: Depth image resolutions (pixel) depending on the chosen quality
            :header:  Connected Camera, Full Quality, High Quality, Medium Quality, Low Quality

            "rc_visard",    "1280 x 960",    "640 x 480",    "320 x 240",    "214 x 160"
            "rc_visard_ng",    "1440 x 1080",    "720 x 540",    "360 x 270",    "240 x 180"
            "rc_viscore",    "4112 x 3008",    "2056 x 1504",    "1028 x 752",    "686 x 502"


   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?quality=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?quality=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?quality=<value>

.. index::
   pair: double_shot; disparity image

.. _expl-depth-double-shot:

``double_shot`` (*Double-Shot*)
'''''''''''''''''''''''''''''''
   Enabling this option will lead to denser disparity images, but will increase processing time.

   For scenes recorded with a projector in ``Single + Out1`` acquisition
   mode, or in continuous acquisition mode with the projector in ``ExposureAlternateActive`` mode,
   holes caused by reflections of the projector are filled with depth information computed from
   the images without projector pattern. In this case, the ``double_shot`` parameter must only be
   enabled if the scene does not change during the acquisition of the images.

   For all other scenes, holes are filled with depth information computed from a downscaled version of the same image.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?double_shot=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?double_shot=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?double_shot=<value>

.. index::
   pair: static_scene; disparity image

.. _expl-depth-static:

``static_scene`` (*Static*)
'''''''''''''''''''''''''''
   This option averages 8 consecutive camera images before matching. This reduces
   noise, which improves the stereo matching result. However, the latency increases significantly.
   The timestamp of the first
   image is taken as timestamp of the disparity image. This option only affects
   matching in full or high quality. It must only be enabled if the scene does not
   change during the acquisition of the 8 images.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?static_scene=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?static_scene=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?static_scene=<value>

.. _expl-depth-min-depth:

.. index::
   single: minimum distance

``mindepth`` (*Minimum Distance*)
'''''''''''''''''''''''''''''''''
   The minimum distance is the smallest distance from the camera
   at which measurements should be possible. Larger values implicitly reduce the
   disparity range, which also reduces the computation time. The minimum distance
   is given in meters.

   Depending on the capabilities of the sensor, the actual minimum distance
   can be higher than the user setting. The actual minimum distance will be
   reported in the status values.

   .. only:: rc_visard or rc_visard_ng

      In ``quality`` mode ``Full``, the actual minimum distance can also be higher
      than the user-defined minimum distance due to memory limitations. In this
      case, lowering the maximum distance helps to reduce the actual minimum distance.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?mindepth=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?mindepth=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?mindepth=<value>

.. _expl-depth-max-depth:

.. index::
   single: maximum distance

``maxdepth`` (*Maximum Distance*)
'''''''''''''''''''''''''''''''''
   The maximum distance is the largest distance from the camera
   at which measurements should be possible. Pixels with larger distance values are
   set to invalid in the disparity image. Setting this value to its maximum permits
   values up to infinity. The maximum distance is given in meters.


   .. only:: rc_visard or rc_visard_ng

      In ``quality`` mode ``Full``, the actual minimum distance can be higher
      than the user-defined minimum distance due to memory limitations. In this
      case, lowering the maximum distance helps to reduce the actual minimum distance.


   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?maxdepth=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?maxdepth=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?maxdepth=<value>

.. _expl-depth-smooth:

.. index::
   pair: smooth; disparity image

``smooth`` (*Smoothing*)
''''''''''''''''''''''''
   This option activates advanced smoothing of disparity values. It is only
   available with a valid StereoPlus license.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?smooth=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?smooth=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?smooth=<value>

.. _expl-depth-fill:

.. index::
   single: fill-in

``fill`` (*Fill-in*)
''''''''''''''''''''
   This option is used to fill holes in the disparity image by interpolation.
   The fill-in value is the maximum allowed disparity step on the border of the
   hole. Larger fill-in values can decrease the number of holes, but the interpolated
   values can have larger errors. At most 5% of pixels are interpolated. Interpolation
   of small holes is preferred over interpolation of larger holes. The confidence for
   the interpolated pixels is set to a low value of 0.5. A fill-in value of 0
   switches hole filling off.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?fill=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?fill=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?fill=<value>

.. _expl-depth-seg:

.. index::
   single: segmentation

``seg`` (*Segmentation*)
''''''''''''''''''''''''
   The segmentation parameter is used to set the minimum number of
   pixels that a connected disparity region in the disparity image must fill.
   Isolated regions that are smaller are set to invalid in the disparity image.
   The value is related to the high quality disparity image with half resolution
   and does not have to be scaled when a different quality
   is chosen. Segmentation is useful for removing erroneous disparities. However,
   larger values may also remove real objects.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?seg=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?seg=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?seg=<value>

.. _expl-depth-min-conf:

.. index::
   single: minimum confidence
   pair: confidence; minimum

``minconf`` (*Minimum Confidence*)
''''''''''''''''''''''''''''''''''
   The minimum confidence can be set to filter potentially false disparity measurements.
   All pixels with less confidence than the chosen value are set to invalid
   in the disparity image.

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?minconf=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?minconf=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?minconf=<value>

.. _expl-depth-max-depth-err:

.. index::
   single: maximum depth error
   pair: depth error; maximum

``maxdeptherr`` (*Maximum Depth Error*)
'''''''''''''''''''''''''''''''''''''''
   The maximum depth error is used to filter measurements
   that are too inaccurate. All pixels with a larger depth error than the chosen
   value are set to invalid in the disparity image. The maximum
   depth error is given in meters. The depth error generally grows quadratically
   with an object's distance from the camera (see :ref:`sect-confidence-error`:latex:`, Section \ref{stereo_matching:sect-confidence-error}`).

   Via the |restapi|, this parameter can be set as follows.

   .. tabs::

      .. tab:: **API version 2**

         .. only:: rc_visard or rc_visard_ng

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/parameters/parameters?maxdeptherr=<value>

         .. only:: rc_cube

            .. code-block:: bash

               PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/parameters?maxdeptherr=<value>

      .. tab:: **API version 1 (deprecated)**

         .. code-block:: bash

            PUT http://<host>/api/v1/nodes/rc_stereomatching/parameters?maxdeptherr=<value>

The same parameters are also available over the GenICam interface with slightly different names and partly with different data types
(see :ref:`sect-genicam`:latex:`, Section \ref{gigevision:sect-genicam}`).

Status values
-------------

This module reports the following status values:

.. tabularcolumns:: |l|L|
.. csv-table:: The ``rc_stereomatching`` module's status values
   :header:  Name, Description

   "``fps``","Actual frame rate of the disparity, error, and confidence images. This value is shown in the |webgui| below the image preview as *FPS (Hz)*."
   "``latency``","Time in seconds between image acquisition and publishing of disparity image"
   "``width``","Current width of the disparity, error, and confidence images in pixels"
   "``height``","Current height of the disparity, error, and confidence images in pixels"
   "``mindepth``","Actual minimum working distance in meters"
   "``maxdepth``","Actual maximum working distance in meters"
   "``time_matching``","Time in seconds for performing stereo matching using |sgm-short| on the GPU"
   "``time_postprocessing``","Time in seconds for postprocessing the matching result on the CPU"
   "``reduced_depth_range``","Indicates whether the depth range is reduced due to computation resources"

.. _sect-stereo-matching-services:

Services
--------

The stereo matching module offers the following services.

``acquisition_trigger``
^^^^^^^^^^^^^^^^^^^^^^^

   Signals the module to perform stereo matching of the next available
   images, if the parameter ``acquisition_mode`` is set to ``SingleFrame`` or
   ``SingleFrameOut1``.

   .. toggle-header::
      :header: **Details**

      An error is returned if the ``acquisition_mode`` is set to ``Continuous``.

      This service can be called as follows.

      .. tabs::

         .. tab:: **API version 2**

            .. only:: rc_visard or rc_visard_ng

               .. code-block:: bash

                  PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/services/acquisition_trigger

            .. only:: rc_cube

               .. code-block:: bash

                  PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/services/acquisition_trigger

         .. tab:: **API version 1 (deprecated)**

            .. code-block:: bash

               PUT http://<host>/api/v1/nodes/rc_stereomatching/services/acquisition_trigger

      .. tabs::

         .. tab:: **Request**

            .. include:: _gen/nodes/services/rc_stereomatching_acquisition_trigger_request.txt

         .. tab:: **Response**

            Possible return codes are shown below.

            .. tabularcolumns:: |c|L|
            .. _tab-stereo-acquisition-trigger-return-codes:
            .. csv-table:: Possible return codes of the ``acquisition_trigger`` service call.
               :header:  Code, Description

               "0",   "Success"
               "-8",  "Triggering is only possible in SingleFrame acquisition mode"
               "101", "Trigger is ignored, because there is a trigger call pending"
               "102", "Trigger is ignored, because there are no subscribers"

            .. include:: _gen/nodes/services/rc_stereomatching_acquisition_trigger_response.txt


``measure_depth``
^^^^^^^^^^^^^^^^^

   Computes the average, minimum and maximum depth in a given region of interest, which can optionally be subdivided into cells.

   .. toggle-header::
      :header: **Details**

      This service can be called as follows.

      .. tabs::

         .. tab:: **API version 2**

            .. only:: rc_visard or rc_visard_ng

               .. code-block:: bash

                  PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/services/measure_depth

            .. only:: rc_cube

               .. code-block:: bash

                  PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/services/measure_depth

         .. tab:: **API version 1 (deprecated)**

            .. code-block:: bash

               PUT http://<host>/api/v1/nodes/rc_stereomatching/services/measure_depth

      .. tabs::

         .. tab:: **Request**

            Optional arguments:
      
               ``region_of_interest_2d_id`` is the ID of the 2D region of interest (see :ref:`sect-roi`:latex:`, Section \ref{roi:sect-roi}`)
               that will be used for the depth measurements.

               ``region_of_interest_2d`` is an alternative on-the-fly definition of the region of interest for the depth measurements. 
               This region of interest will be ignored if a ``region_of_interest_2d_id`` is given. The region of interest is always defined
               on the camera image with full resolution, where ``offset_x`` and ``offset_y`` are the pixel coordinates of the upper left corner
               of the rectangular region of interest, and ``width`` and ``height`` are the width and height of it in pixels.
               Default is a region of interest covering the whole image.

               ``cell_count`` is the number of cells in x and y direction into which the region of interest is divided. 
               If not given, a cell count of 0, 0 is assumed and only the overall values will be computed. The total cell count
               computed as product of the x and y values must not exceed 100.

               ``data_acquisition_mode``: if set to ``CAPTURE_NEW`` (default), a new image dataset will be used for the measurement.
               If set to ``USE_LAST``, the previous dataset will be used for the measurement.

               ``pose_frame`` controls whether the coordinates of the depth measurement are
               returned in the ``camera`` or ``external`` frame, if a hand-eye calibration is available (see 
               :ref:`sect-handeye-calibration`:latex:`, Section \ref{handeye_calibration:sect-handeye-calibration}`).
               The default is ``camera``.


            Potentially required arguments:

               ``robot_pose`` is the pose of the robot at the time of the depth measurement. It is required when the external 
               pose frame is used and the camera is robot mounted.


            .. include:: _gen/nodes/services/rc_stereomatching_measure_depth_request.txt

         .. tab:: **Response**

            .. tabularcolumns:: |c|L|
            .. csv-table:: ``return_code`` values of the ``measure_depth`` service call
               :header: "``value``", "Description"

               "0", "measurement successful"
               "-1", "an invalid argument was given"

            ``cells`` contains the depth measurements of all requested cells. The cells are always ordered from left to right and top
            to bottom in image coordinates.
            
            ``overall`` contains the depth measurements of the full region of interest.

            ``coverage`` is a number between 0 and 1 which reflects the fraction of valid depth measurements inside the respective cell.
            A coverage of 0 means that the cell is invalid.

            ``min_z`` and ``max_z`` return the 3D coordinate of the point in the cell with the minimum and maximum depth value, respectively.
            The depth value is the z coordinate in the camera coordinate system.

            For ``mean_z``, the x and y coordinates define the point in the middle of the cell and the z coordinate is determined by the 
            average of all depth value measurements in the cell.

            ``region_of_interest_2d`` returns the definition of the requested region of interest for the depth measurement.

            If ``pose_frame`` is ``external``, then the x, y and z coordinates are returned in the robot coordinate system.

            .. include:: _gen/nodes/services/rc_stereomatching_measure_depth_response.txt

``reset_defaults``
^^^^^^^^^^^^^^^^^^

   Restores and applies the default values for this module's parameters
   ("factory reset").

   .. toggle-header::
      :header: **Details**

      This service can be called as follows.

      .. tabs::

         .. tab:: **API version 2**

            .. only:: rc_visard or rc_visard_ng

               .. code-block:: bash

                  PUT http://<host>/api/v2/pipelines/0/nodes/rc_stereomatching/services/reset_defaults

            .. only:: rc_cube

               .. code-block:: bash

                  PUT http://<host>/api/v2/pipelines/<0,1,2,3>/nodes/rc_stereomatching/services/reset_defaults

         .. tab:: **API version 1 (deprecated)**

            .. code-block:: bash

               PUT http://<host>/api/v1/nodes/rc_stereomatching/services/reset_defaults

      .. tabs::

         .. tab:: **Request**

            .. include:: _gen/nodes/services/rc_stereomatching_reset_defaults_request.txt

         .. tab:: **Response**

            .. include:: _gen/nodes/services/rc_stereomatching_reset_defaults_response.txt

